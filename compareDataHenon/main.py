import numpy as np
import matplotlib.pyplot as plt
import scipy.linalg as la
import mpmath as mp
import scipy.optimize as opti

a5 = [1.0611967168179623, 1.0730286018061894, 1.0849156719753164, 1.096819160470956, 1.1087728648717996, 1.120705814605513, 1.1326872770491623, 1.1446666452074383, 1.156694193821162, 1.168671932872025, 1.180436035327658, 1.1924849417890209, 1.204468947590581, 1.2164681415325562, 1.2285064190250912, 1.2405243792046043, 1.2524878365837442, 1.264494282012329, 1.2766328754974947, 1.288615121525519, 1.3006078875562987, 1.3126616129259514, 1.3246843173840654, 1.3367826027782004, 1.3487544133299412, 1.3607762947214204, 1.3728388604049169, 1.3848319240130322, 1.396918316975038, 1.4088634353606981, 1.4231668004212692, 1.43476825770932, 1.4464074149233463, 1.4580520982290681, 1.4697427108474272, 1.483623674508795, 1.4944943365501204, 1.5078800753962966, 1.5190373181677699, 1.5303117907879487]
a4 = [1.0249722976482196, 1.0363242098030219, 1.0477025374034195, 1.05909492665279, 1.0704968650917153, 1.081935181948172, 1.0933741809243012, 1.1048399804789322, 1.1163252438651958, 1.1278244675004734, 1.1393454507117564, 1.1508812693350605, 1.1624323254896773, 1.173993288919792, 1.1855763362776888, 1.1971762688220247, 1.2087849433747333, 1.2204041561365495, 1.232040379890624, 1.2436976575002145, 1.2553586220517017, 1.2670296312446436, 1.2787270828843793, 1.29042282522799, 1.3021304776714766, 1.3138540233717357, 1.325587473534408, 1.337327773831991, 1.3490807613222584, 1.3608429458097835, 1.3726034653315073, 1.3843850114272693, 1.3961723472279466, 1.407967151005336, 1.4197715841632716, 1.4315823199633009, 1.4433961460702829, 1.4552096019180178, 1.4670437229619453, 1.4788754287976627]
oldLinea40 = [0.8400249075525371, 0.864291157049293, 0.8885002392192298, 0.9126464869050372, 0.9367241336607693,
       0.9607603804936845, 0.9847261413500082, 1.0086563108553606, 1.0325203720506175, 1.0563557369667127,
       1.079654746313354, 1.103424003441093, 1.1272182052811983, 1.150944391611584, 1.174603780100971,
       1.1982504104716087, 1.2219260074894787, 1.2454799960506375, 1.2689052184258227, 1.292454400959742,
       1.3159016674515378, 1.3392732504297762, 1.362671576555902, 1.3859414985656155, 1.409261636325061,
       1.4325211136741998, 1.455733094760608, 1.4789295442916135, 1.5020881132167683, 1.5251957153813536,
       1.545960932032197, 1.5694182937092034, 1.5928046440038404, 1.6161638182099907, 1.6395027473666757,
       1.660416644198275, 1.68443277692722, 1.7060197807443611, 1.7295679065448526, 1.7530879506918609]
oldLineb40 = [-0.49979979979979977, -0.48978978978978976, -0.47977977977977976, -0.46976976976976975, -0.45975975975975975,
       -0.44974974974974974, -0.43973973973973973, -0.4297297297297297, -0.4197197197197197, -0.4097097097097097, -0.4,
       -0.3899665551839465, -0.379933110367893, -0.3698996655518395, -0.359866220735786, -0.34983277591973244,
       -0.33979933110367894, -0.32976588628762543, -0.3197324414715719, -0.3096989966555184, -0.29966555183946486,
       -0.28963210702341136, -0.27959866220735785, -0.26956521739130435, -0.25953177257525084, -0.24949832775919734,
       -0.23946488294314383, -0.2294314381270903, -0.2193979933110368, -0.2093645484949833, -0.19933110367892976,
       -0.18929765886287625, -0.17926421404682275, -0.16923076923076924, -0.1591973244147157, -0.14916387959866217,
       -0.13913043478260867, -0.12909698996655516, -0.11906354515050166, -0.10903010033444815]
line = [2.52019079, 2.52019079, 2.51580035, 2.51360013, 2.51140991, 2.50920969,
 2.50701947, 2.50483926, 2.50264904, 2.50044882, 2.4982586, 2.49607838,
 2.49388816, 2.49170794, 2.48951772, 2.4873175,  2.48514729, 2.48294707,
 2.48077685, 2.47857663, 2.47640641, 2.47422619, 2.47203598, 2.46985576,
 2.46766554, 2.46548532, 2.4633151,  2.46113489, 2.45894467, 2.45676445,
 2.45459423, 2.45241401, 2.4502438,  2.44806358, 2.44589336, 2.44371314,
 2.44154293, 2.43936271, 2.43719249, 2.43501227, 2.43284206, 2.43066184,
 2.42849162, 2.4263314,  2.42416119, 2.42198097, 2.41981075, 2.41765054,
 2.41548032, 2.4133201,  2.41114989, 2.40898967, 2.40681945, 2.40465924,
 2.40248902, 2.4003288,  2.39815859, 2.39599837, 2.39382815, 2.39166794,
 2.38951772, 2.38735751, 2.38518729, 2.38302707, 2.38087686, 2.37871664,
 2.37654643, 2.37440621, 2.372236,   2.37007578, 2.36792556, 2.36576535,
 2.36361513, 2.36145492, 2.3593047,  2.35716449, 2.35501427, 2.35285406,
 2.35070384, 2.34854363, 2.34639341, 2.3442532,  2.34210298, 2.33996277,
 2.33781255, 2.33565234, 2.33352212, 2.33136191, 2.32923169, 2.32707148,
 2.32494127, 2.32278105, 2.32065084, 2.31851062, 2.31636041, 2.31422019,
 2.31206998, 2.30992976, 2.30779955, 2.30565934]
Bline = np.linspace(-0.3, -0.2,100)
model1 = np.poly1d(np.polyfit(Bline, line, 1))
lmodel1 = list(model1.c)
coef1 = ["al", "bl"]
result1 = dict(zip(coef1, lmodel1))
print(result1)

b40 = [-0.4, -0.3948717948717949, -0.38974358974358975, -0.38461538461538464, -0.3794871794871795, -0.37435897435897436, -0.36923076923076925, -0.36410256410256414, -0.358974358974359, -0.35384615384615387, -0.34871794871794876, -0.3435897435897436, -0.3384615384615385, -0.33333333333333337, -0.32820512820512826, -0.3230769230769231, -0.317948717948718, -0.3128205128205128, -0.3076923076923077, -0.3025641025641026, -0.2974358974358975, -0.2923076923076923, -0.2871794871794872, -0.28205128205128205, -0.27692307692307694, -0.27179487179487183, -0.2666666666666667, -0.26153846153846155, -0.25641025641025644, -0.2512820512820513, -0.24615384615384617, -0.24102564102564106, -0.23589743589743592, -0.23076923076923078, -0.22564102564102567, -0.22051282051282053, -0.2153846153846154, -0.2102564102564103, -0.20512820512820515, -0.2]

a3 = [1.0536848529356022, 1.0588574266845054, 1.0641400541203796, 1.069518554272173, 1.0750210828914835, 1.080600141272375, 1.0863036696127681, 1.0920789864849783, 1.0979670223194735, 1.1042635729999897, 1.110054495513167, 1.1162667622347002, 1.1225809858412878, 1.1289515187879369, 1.1354621361212767, 1.142078029027539, 1.1487802300758954, 1.1557192915526626, 1.162613186491033, 1.1694671131632952, 1.1766758244873388, 1.1838676832287305, 1.1911759911768232, 1.1985680048600966, 1.206057713197807, 1.213616515456778, 1.2212876111570397, 1.2291196747575261, 1.237028200923354, 1.244975683904535, 1.2530959852451147, 1.261252732556629, 1.269553300169872, 1.277967436759791, 1.2864656035333515, 1.2950144658485787, 1.3037054623780484, 1.3125023066626267, 1.321376108585682, 1.3303111662832903]

sink3x = [1.283081368320497, 1.2804634026875648, 1.2777946650539704, 1.2750782237499017, 1.2723155316690762, 1.269504292712163, 1.266648840147237, 1.2637466197645635, 1.2608007511290278, 1.2576243772277444, 1.2547830019467128, 1.251715876051499, 1.2486082926041873, 1.2454537607017686, 1.2422697379513796, 1.239049295660291, 1.2357898283461737, 1.2324101328243986, 1.2290829592203067, 1.2257989912488843, 1.2223708106997795, 1.2189524319631322, 1.215481724848462, 1.2120032600724417, 1.2084998220738323, 1.204993412020138, 1.2014291256091603, 1.1978281680318699, 1.1941945429897123, 1.1905824380802268, 1.1869091186142888, 1.1832339184896359, 1.179532050942803, 1.1757755132572356, 1.1719892056178294, 1.168294891291183, 1.1644944607759278, 1.160628578990027, 1.1568061820336963, 1.1530840353325158]
sink3y = [-0.050883774904716406, -0.04933196436609133, -0.04786291285098421, -0.04636806685400202, -0.04503588455297969, -0.04358421036159066, -0.04229934333405794, -0.04085499189886205, -0.03951129130750164, -0.03828913748148166, -0.03693323480289984, -0.03582072987322482, -0.03472302672834149, -0.03334627806995122, -0.03227623390170392, -0.03127586005973848, -0.030201458136631554, -0.029137207183269787, -0.02806937082959443, -0.02692848658841923, -0.026252267259790463, -0.025304932848446482, -0.024260836125827634, -0.02336370586187858, -0.02251550478839892, -0.021773447943073898, -0.020792886690295442, -0.020109788522292005, -0.019203426341925955, -0.018461088582466534, -0.01778000004553959, -0.0169361517270899, -0.016363775037816497, -0.015463665040483188, -0.014312792644930239, -0.014368753152992686, -0.01352442385099173, -0.012022930483117172, -0.011237911839499515, -0.011979623334549938]
bvalues = []
avalues = []
xvalues = []
yvalues = []

def hMap(a, b, x, y):
    return 1 - a * x ** 2 + b * y


# −b−1(1 − ayn2 − bxn)
def backwards_hMap(a, b, x, y):
    return -(1 / b) * (1 - a * y ** 2 - x)


def getPeriodic(a, b):
    p1 = (-1 * (1 - b) + np.sqrt((1 - b) ** 2 + 4 * a)) / (2 * a)
    p2 = (-1 * (1 - b) - np.sqrt((1 - b) ** 2 + 4 * a)) / (2 * a)
    return p1, p2


def getUnstableLin(a, b, x):
    evecUn = [-a * x + np.sqrt(b + a ** 2 * x ** 2), 1]
    return evecUn


def getStableLin(a, b, x):
    evecSt = [-a * x - np.sqrt(b + a ** 2 * x ** 2), 1]
    return evecSt


def eigvalue(a, b, x):
    A = np.array([[-2 * a * x, b], [1, 0]])
    results = la.eig(A)
    return results[0]


def findorbit(x, y, a, b, M):
    xi = x
    yi = y
    for j in range(M):
        xO = xi
        yO = yi
        xN = hMap(a, b, xO, yO)
        yN = xO
        xi = xN
        yi = yN
    return xN, yN


def findorbit1(x, y, a, b, M):
    xi = x
    yi = y
    for j in range(M):
        xO = xi
        yO = yi
        xN = yO
        yN = backwards_hMap(a, b, xO, yO)
        xi = xN
        yi = yN
    return xN, yN

with open('period 3 data - Sheet1.tsv') as f:
    lines = f.readlines()
    for i in range(1,len(lines)):
        temp = lines[i].split(',')
        bvalues.append(float(temp[0].strip()))
        avalues.append(float(temp[1].strip()))
        xvalues.append(float(temp[2].strip()))
        yvalues.append(float(temp[3].strip()))
# secondTangencyDistances = np.zeros(len(bvalues))
# for k in range(len(bvalues)):
#     print(k)
# k= 1
for j in range(len(bvalues)):
    if( bvalues[j] > -0.5 and bvalues[j] < -0.4):
        print(avalues[j])
        print(bvalues[j])

a = line[2]





b = Bline[2]


p1, p2 = getPeriodic(a,b)
evecUn = getUnstableLin(a, b, p1)
print(eigvalue(a, b, p2))
dx = evecUn[0]
dy = evecUn[1]
evecSt = getStableLin(a, b, p1)  # eigenvector for stable manifold
dx_b = evecSt[0]
dy_b = evecSt[1]

lCut = 0
rCut = 0.001
lCut1 = 0
rCut1 = 0.00005
density = 500000
M=8
xstableline = np.linspace(p1 + (lCut1 * dx_b), p1 + (dx_b * rCut1), density)
ystableline = np.linspace(p1 + (lCut1 * dy_b), p1 + (dy_b * rCut1), density)
xunstableline = np.linspace(p1 + (lCut * dx), p1 + (dx * rCut), density)
yunstableline = np.linspace(p1 + (lCut * dy), p1 + (dy * rCut), density)
xunstab, yunstab = findorbit(xunstableline, yunstableline, a, b, M)
xstab, ystab = findorbit1(xstableline, ystableline, a, b, M)
#     closestXunstab = min(xunstab)
#     index = np.argmin(xunstab)
#     xtangency = xunstab[index]
#     ytangency = yunstab[index]
#     counter = 10
#     for i in range(len(xstab)):
#         distance = abs(xstab[i]-xtangency) + abs(ystab[i]-ytangency)
#         if(distance < counter):
#             counter = distance
#     secondTangencyDistances[k] = counter
# val = min(secondTangencyDistances)
# print(val)
# answer = secondTangencyDistances.index(val)
# print(avalues[answer], bvalues[answer])

fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()
ax1.plot(b40,a5, color = 'black', markersize =1)
ax1.plot(b40,a4, color = 'cyan', markersize =1)
ax1.plot(-0.4160499999999872,1.0382873282103795, 'X', color = 'black', markersize = 3)
ax1.plot(-0.299,1.173198507953394, 'X', color = 'black', markersize = 3)
ax1.plot(oldLineb40,oldLinea40, color = 'purple', markersize =1)
ax1.plot(Bline,line, color = 'green', markersize =1)
ax1.plot(b40,a3, color = 'red', markersize =1)
ax1.plot(bvalues, avalues, color = 'blue', markersize =1)

ax2.plot(xstab,ystab, '.', color = 'red', alpha = 0.9, markersize =1)
ax2.plot(xunstab,yunstab, '.', color = 'blue', alpha = 0.9, markersize = 1)
ax2.set_xlim([-5,5])
ax2.set_ylim([-5,5])
plt.show()